#ifndef __GST_OBSTENTRICS_H__
#define __GST_OBSTENTRICS_H__

#include <gst/base/gstbasetransform.h>
#include <gst/video/video.h>

#include <cuda.h>
#include <cuda_runtime.h>
#include "nvbufsurface.h"
#include "nvbufsurftransform.h"
#include "gst-nvquery.h"
#include "gstnvdsmeta.h"

/* Custom class */
#include "pipeline.h"
// #include<opencv2/freetype.hpp>
using namespace obstetrics;

/* Package and library details required for plugin_init */
#define PACKAGE "obstetrics"
#define VERSION "1.0"
#define LICENSE "Proprietary"
#define DESCRIPTION "Obstetrics plugin"
#define BINARY_PACKAGE "NVIDIA DeepStream 3rdparty IP integration example plugin"
#define URL "http://nvidia.com/"

G_BEGIN_DECLS
/* Standard boilerplate stuff */
typedef struct _GstThisPlugin GstThisPlugin;
typedef struct _GstThisPluginClass GstThisPluginClass;

/* Standard boilerplate stuff */
#define GST_TYPE_THISPLUGIN (gst_this_plugin_get_type())
#define GST_THISPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_THISPLUGIN, GstThisPlugin))
#define GST_THISPLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_THISPLUGIN, GstThisPluginClass))
#define GST_THISPLUGIN_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS((obj), GST_TYPE_THISPLUGIN, GstThisPluginClass))
#define GST_IS_THISPLUGIN(obj) (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_THISPLUGIN))
#define GST_IS_THISPLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_THISPLUGIN))
#define GST_THISPLUGIN_CAST(obj)  ((GstThisPlugin *)(obj))

struct _GstThisPlugin
{
  GstBaseTransform base_trans;

  // Unique ID of the element. The labels generated by the element will be
  // updated at index `unique_id` of attr_info array in NvDsObjectParams.
  guint unique_id;

  // Frame number of the current input buffer
  guint64 frame_num;

  // CUDA Stream used for allocating the CUDA task
  cudaStream_t cuda_stream;

  // Input video info (resolution, color format, framerate, etc)
  GstVideoInfo video_info;

  // Amount of objects processed in single call to algorithm
  guint batch_size;

  // GPU ID on which we expect to execute the task
  guint gpu_id;

  // 开启全新会诊，用于初始化变量
  gboolean reset;

  // 截屏
  gboolean screenshot;

  // 图像保存地址
  gchar* output_dir;

  // 医生测量
  gboolean manual;

  // 医生测量名称
  gchar* measure_name;

  // 医生测量图片路径
  gchar* img_path; 

  // add roperties here
  // pipeline配置文件
  gchar* pipeline_cfg_path;

  // Custom class
  // 实例化pipeline类
  obstetrics::Pipeline *obstetrics_pipeline;

  // Custom variable
  // 记录更新标准面
  std::map<std::string, float> spl_update;
  // 跳帧发送
  guint skip_frame;
  // temp skip frame
  guint tmp_skip_frame;

};

// Boiler plate stuff
struct _GstThisPluginClass
{
  GstBaseTransformClass parent_class;
};

GType gst_this_plugin_get_type (void);

G_END_DECLS
#endif /* __GST_OBSTENTRICS_H__ */
